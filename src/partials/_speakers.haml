%section#speakers
  .wrapper
    %h1.heading
      %a{:name=>"speakers"}
      %span Speakers
    %ul
      %li
        .detail
          .inner
            %h1 Konstantin Haase
            %p
              OSS developer. Conference-goer. Maintainer of @Sinatra, full time dev on @TravisCI, was full time on @Rubinius, core team member of Rack, Tilt and many more.
            %h1 Ruby: Where Are You Going?
            %p
              A look at the past, present and future of web development in Ruby. How does Rails work internally?
              What is going to happen in Rails 4? What are the plans for Sinatra?
              Right now, there are at least two replacements for Rack in the makings.
              But it is the underlying technology used by Rails, Sinatra and nearly any other Ruby web framework out there.
              Yet, it's the framework authors pushing for the changes. So, what's wrong with Rack?
              And what does that mean for us as web developers?
        .rounded
          = img "../images/speakers/konstantin.jpg"
        %a{:href=>"https://twitter.com/konstantinhaase", :class=>"twitter"}= img "../images/twitter.png"
        %a{:href=>"https://github.com/rkh", :class=>"github"}= img "../images/github.png"
        %h2 Konstantin Haase
        %p Ruby: Where Are You Going?
      %li
        .detail
          .inner
            %h1 Danish Kahn
            %p
              I realized I wanted to learn practical programming skills so once I found out about Ruby in college I immediately installed Locomotive on my Mac.
              Was extremely excited to find out I already had Ruby 1.8.6 preinstalled on my iBook G4 and started hacking on my first Rails project.
              I find teaching to be enjoyable and have been participating in the SF RailsBridge every so often. I'm still a level 1 whiskey/whisky drinker, but I'm working on that.
              Currently I am working at GitHub doing cool stuff.
            %h1 Don't Be an A**hole
            %p
              Ruby is now 18 years old. It has become a very mature project and the developers that have been using it are a lot more mature now as well. Our community has long since crossed the chasm and we are in the early majority stage. This means that even though we have many people who are well versed in the language we are again having an influx of new people.
              I want to help those new people feel comfortable enough to believe they can learn and become just as mature as the oldies who are part of the community. Also, I want to educate the oldies on how they can better help out these newbies.
              The Ruby community has become very much like any other close-knit community. We are very biased towards certain philosophies such as agile development, pair programming, and TDD. Some might compare our community to other close-knit organizations such as fraternities/sororities, athletic clubs and the freemasons. They all have very idealistic philosophies they run their organizations on.
              I want to show how we compare to these types of organizations. I want to highlight the good things we adopted from running our community this way as well as the bad. I want to show how we can improve and fix the bad habits so that we can create a more open community for new people to join and feel welcomed.
        .rounded
          = img "../images/speakers/danishkhan.jpeg"
        %a{:href=>"https://twitter.com/danishkhan", :class=>"twitter"}= img "../images/twitter.png"
        %a{:href=>"https://github.com/danishkhan", :class=>"github"}= img "../images/github.png"
        %h2 Danish Khan
        %p Don't Be an A**hole
      %li
        .detail.left
          .inner
            %h1 Aaron Kalin
            %p
              Aaron Kalin is a developer for Treehouse hailing from Chicago and has been programming for over 15 years.
              At night you'll find him hacking on game servers or experimenting with other programming languages.
              He's passionate about solving problems and enjoys giving back as much as possible.
              You'll sometimes find him dressed as a Stormtrooper to raise money for charity or cheering up sick kids in hospitals.
            %h1 Hey Kid! Don't Copy That Floppy!
            %p
              Software licensing sets up rules for everyone to follow when contributing or using code.
              Some companies have specific policies on what types of licenses are compatible with their code base.
              Other companies put rules on their developers on how they're allowed to contribute code to software. Do you license your software?
              This talk will review some popular open source software licenses and considerations you should make before contributing code.
              It's good to be aware of these rules before you end up on the wrong side of a Cease and Desist order.
        .rounded
          = img "../images/speakers/aaron_kalin.jpg"
        %a{:href=>"https://twitter.com/martinisoft", :class=>"twitter"}= img "../images/twitter.png"
        %a{:href=>"https://github.com/martinisoft", :class=>"github"}= img "../images/github.png"
        %h2 Aaron Kalin
        %p Hey Kid! Don't Copy That Floppy!
      %li
        .detail.left
          .inner
            %h1 Chris Spring
            %p
              Chris works at Mad Mimi where he spends his days toiling over features, scaling and performance.
              He's also actively involved in growing the local dev community and is the founder and organiser of Code&Coffee Jhb,
              as well as an organiser of RubyOnBeer
            %h1 Rack based web apps with JRuby and TorqueBox
            %p
              JRuby runs on the JVM to bring high levels of performance and parallelism to your long running ruby code.
              TorqueBox is a performant and scaleable application server that reduces the complexity and dependencies of rack based web applications.
              See how these two tools can be used to simplify your ruby web development while delivering excellent performance under heavy
              loads with some real world examples.
        .rounded
          = img "../images/speakers/chris_spring.jpeg"
        %a{:href=>"https://twitter.com/autonomous", :class=>"twitter"}= img "../images/twitter.png"
        %a{:href=>"https://github.com/autonomous", :class=>"github"}= img "../images/github.png"
        %h2 Chris Spring
        %p Rack based web apps with JRuby and TorqueBox
      %li
        .detail
          .inner
            %h1 Lance Gleason
            %p
              Lance has been a computer nut ever since his dad bought him a VIC 20 in the 80's.
              For a number of years he was working in Java for large companies such as CNN, Kodak and GE.
              Then one day about four years ago he did a self intervention and decided to end his addiction to heavy inheritance,
              static typing and coding without tests.
              These days he a committer on projects such as Adhearsion practicing clean Ruby living with lots of well-tested code,
              class composition and fun dynamic languages as a startup CTO and freelance developer.
              When he's not writing Ruby you will find him diving with sharks, trekking through a rain forest,
              wine tasting or freaking out his neighbors with his ARDrone.
            %h1 Dynamic Routing with Circuit
            %p
              Rails and Rack both have mechanisms to route requests.
              They are powerful, and offer some dynamic routing if you want to route within Rails.
              But what if you need to dynamically route requests to multiple Rack based applications?
              What if you want to control that routing dynamically with a database? Circuit allows you to do that.
              In this talk will explore the basics of Rack Middleware and Routing.
              Then we will show you how Circuit can help you to take Rack routing to the next level dynamically with lots of traffic.
        .rounded
          = img "../images/speakers/lance.jpg", :class => "bg"
        %a{:href=>"https://twitter.com/lgleasain", :class=>"twitter"}= img "../images/twitter.png"
        %a{:href=>"https://github.com/lgleasain", :class=>"github"}= img "../images/github.png"
        %h2 Lance Gleason
        %p Dynamic Routing with Circuit
      %li
        .detail
          .inner
            %h1 John Anderson
            %p
              Ruby since 2004. Rails since 2005. Programming since 1994. Or 1989. Or was it 1983? I forget...
            %h1 Do It Yerself, Rube
            %p
              Abstraction is like alcohol: a little is nice; a little more is a little nicer. A lot is a headache.
              Is it really worth writing one line when you can write 3? Or 8?
              As a consumer, when is finding the right gem harder than just writing it yourself?
              Some examples of over-gemmification and a few lines of code that do what you need.
              As a producer, what does it take to get your code ready to be released as a gem?
              It's turtles all the way down. Unless you make some assumptions for them to stand on.
        .rounded
          = img "../images/speakers/johnanderson.png", :class => "bg"
        %a{:href=>"https://twitter.com/djellemah", :class=>"twitter"}= img "../images/twitter.png"
        / %a{:href=>"#", :class=>"github"}= img "../images/github.png"
        %h2 John Anderson
        %p Do It Yerself, Rube
      %li
        .detail.left
          .inner
            %h1 Jesse Newland
            %p
              Jesse Newland does Ops at GitHub. Prior to GitHub, Jesse was the CTO at Rails Machine.
              There, he hacked on a large private cloud while managing, scaling and tuning several hundred production Ruby on Rails applications.
              He lives in Savannah, Georgia, and plays guitar and piano for fun.
            %h1 ChatOps at GitHub
            %p
              Hubot, GitHub's open source chat bot, is completely revolutionizing how we do ops at GitHub.
              Automating deployment, graphing, monitoring, provisioning, tweeting, and many other things with
              Hubot has enabled and enhanced our culture of remote work.
              We're standardizing how we interact with the applications and servers that run GitHub by
              continuously expanding our library of Hubot commands that any GitHubber can run in multiple Campfire chat rooms.
              Interacting with Hubot in the middle other of conversations has increased our awareness of what other
              GitHubbers are working on and the speed at which new team members learn common practices.
              In this talk, I'll give examples of how we deploy and interact with github.com via Hubot,
              describe benefits we've seen from this approach, and describe how you can bring ChatOps into your daily workflow.
        .rounded
          = img "../images/speakers/jessenewland.jpg"
        %a{:href=>"#", :class=>"twitter"}= img "../images/twitter.png"
        %a{:href=>"#", :class=>"github"}= img "../images/github.png"
        %h2 Jesse Newland
        %p ChatOps at GitHub
      %li.you
        .rounded
          %a{:href=>"http://rubyfuza.wufoo.com/forms/rubyfuza-2013-talk-proposal/"}= img "../images/speakers/you.png"
        %h2 You?
        %p
          We're still looking for inspiring speakers!
          = link_to "I want to speak", "http://rubyfuza.wufoo.com/forms/rubyfuza-2013-talk-proposal/", :class => "hot"