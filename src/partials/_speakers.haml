%section#speakers
  .wrapper
    %h1.heading
      %a{:name=>"speakers"}
      %span Speakers

    %ul
      %li.speaker
        .rounded
          %a{href: '#speaker1', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/charlene.jpg"
          %a{:href=>"https://twitter.com/charlymul", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/nathilen", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker1', rel: 'speakers', class: 'fancybox'} Charlene Tshitoka
        %p Software Development in Africa

        #speaker1.detail
          .links.right
            %a{:href=>"https://twitter.com/charlymul", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/nathilen", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/charlene.jpg"
            %h2 Charlene Tshitoka
          .inner
            %p Charlene is a developer who has recently started questioning whether there is really such a thing called devops. Between working with configuration management tools and orchestration frameworks, she has discovered there is a ruby community out there. Charlene has been trying to infiltrate it since then.  She is currently part of the ThoughtWorks team.
            %h3 Software Development in Africa
            %p Software development has gone through many upheavals and downhills to what it is currently. Still, it remains an impressive creation that is changing the lifestyles of many. Africa, on the other side, has a history that is yet to fully captivate many of its own people. So what could “software development” and “Africa” be doing in the same phrase?
            %p Being passionate about code and enjoying a love-hate relationship with my continent, I will share how these words resonate with me. I will discuss some of the achievements and also challenges of developing software in Africa, my fears and hopes too. Let’s have a conversation on what these words mean for us; software development and Africa put together.

      %li.speaker
        .rounded
          %a{href: '#speaker2', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/alex.jpg"
          %a{:href=>"https://twitter.com/myabc", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/myabc", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker2', rel: 'speakers', class: 'fancybox'} Alex Coles
        %p Find Simplicity With Plain Old Ruby Objects

        #speaker2.detail
          .links.right
            %a{:href=>"https://twitter.com/myabc", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/myabc", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/alex.jpg"
            %h2 Alex Coles
          .inner
            %p Alex Coles is a freelance web developer, unabashedly wearing the hat of "generalist". He is active in the Ruby community, having founded the annual eurucamp camp/conference in Berlin. He has also contributed extensively to many open-source projects including RefineryCMS and DataMapper.
            %h3 Find Simplicity With Plain Old Ruby Objects
            %p This talk will discuss why you might, when you set out to design a system, want to stop thinking about persistence. Rather than kicking off a project generating models that subclass ActiveRecord::Base, I will suggest beginning your application development by modelling behaviour with Plain Old Ruby Objects (POROs).
            %p While including ideas from Avdi Grimm's Objects on Rails, the talk will primarily be based around my personal experience refactoring an-ActiveResource based system with Plain Old Ruby Objects and roar.
            %p Included in this talk will be an exploration of:
            %ul
              %li patterns, such as Repository and Data Mapper, as coined by Martin Fowler,
              %li how upcoming libraries &eldash; Curator, DataMappify, ROM.rb and Veritas &eldash; fit in with these patterns,
              %li the parts of these libraries that are usable today,
              %li how to make this methodology workable in the context of TDD (keeping components as testable as possible).
            %p There will also be a discussion about the stage when you should begin implementing persistence.

      %li.speaker
        .rounded
          %a{href: '#speaker3', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/andre.jpg"
          %a{:href=>"https://twitter.com/indirect", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/indirect", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker3', rel: 'speakers', class: 'fancybox'} André Arko
        %p Extreme Makeover: Rubygems Edition

        #speaker3.detail
          .links.right
            %a{:href=>"https://twitter.com/indirect", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/indirect", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/andre.jpg"
            %h2 André Arko
          .inner
            %p André thinks Ruby is pretty cool. He designs and builds web applications at Cloud City Development by day, and works on Bundler and Rubygems by night… and also some days.
            %h3 Extreme Makeover: Rubygems Edition
            %p Rubygems.org provides every Rubyist with an amazing service: all the libraries in the Ruby world. As amazing as that is, installing gems can be a time-consuming and even error-prone process. (Just ask the Travis guys.) In this talk, you'll learn about the recent dramatic changes in Rubygems and Bundler to improve speed and reliability by rewriting the Rubygems client/server architecture. I'll show how the new system caches more information, makes fewer requests, and takes less time to install gems. Finally, I'll cover how the changes allow worldwide mirrors of rubygems.org, improving things for Rubyists around the globe.

      %li.speaker
        .rounded
          %a{href: '#speaker4', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/mmongeau.jpg"
          %a{:href=>"https://twitter.com/halogenandtoast", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/halogenandtoast", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker4', rel: 'speakers', class: 'fancybox'} Matthew Mongeau
        %p The Art of Ruby

        #speaker4.detail
          .links.right
            %a{:href=>"https://twitter.com/halogenandtoast", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/halogenandtoast", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/mmongeau.jpg"
            %h2 Matthew Mongeau
          .inner
            %p I've programming in Ruby and Ruby on Rails since late 2004 when the first 15 minute blog video hit the web. Forever changed by brief introduction to Rails I've spent the last 9 years honing my craft. I eventually found myself at thoughtbot where I currently spread the knowledge of Ruby to others by teaching workshops both online and in person.
            %h3 The Art of Ruby
            %p We should all be artists in our craft, but there is a balance between expressiveness and performance. This talk is about finding that balance and producing beautiful code that doesn't sacrifice syntax for speed. I'll explore real world examples of code and mold them into something far more expressive. During the process we'll take a look at how common design patterns are applied to larger applications and examine the repercussions.

      %li.speaker
        .rounded
          %a{href: '#speaker5', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/daniel.jpg"
          %a{:href=>"https://twitter.com/dasch", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/dasch", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker5', rel: 'speakers', class: 'fancybox'} Daniel Schierbeck
        %p Curly — Refactoring the view layer

        #speaker5.detail
          .links.right
            %a{:href=>"https://twitter.com/dasch", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/dasch", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/daniel.jpg"
            %h2 Daniel Schierbeck
          .inner
            %p Daniel Schierbeck has been programming in Ruby since 2005 after completing level 99 in PHP and figuring out there was no prize to win after all.
            %p He studied Computer Science at the University of Copenhagen, where he primarily spent his time trying to avoid writing C++. He got into Concurrent Sequential Processes before it became cool, and wrote a Ruby implementation called Minx for his bachelor thesis. As with all academic code, it is used by no one.
            %p He currently pumps out pull requests for a living at Zendesk, a San Francisco based Customer Support Software SaaS company.
            %h3 Curly — Refactoring the view layer
            %p While most parts of Rails have been thoroughly overhauled during the past few years, one part has stubbornly refused improvement. The view layer is still by default using ERB to transform your app’s objects into HTML. Though HAML has gained a lot of traction, it is not a fundamental shift away from ERB, but rather a preference for putting HTML in your Ruby rather than the other way around.
            %p More recent efforts in the realm of JavaScript have produced Mustache and its ambitious younger brother, Handlebars. While these are more radical in their attempt to separate structure and logic, they still do not feel like native Rails code.
            %p While trying to solve a seemingly unrelated problem we discovered a design that suddenly enabled us to move past the limitations of ERB. Though different only in subtle ways, it struck just the right balance between integration with Rails and separation of concerns. We called it Curly.
            %p I will show how we use the same old OO techniques that you already know to clean up our views, making them less prone to bugs, more readable, and more reusable.
            %p I’ll also show how a seemingly small change of our conceptual model enabled us to add advanced behavior to our view layer without ending with an unmaintainable mess.
            %p Curly is open source and available at http://github.com/zendesk/curly

      %li.speaker
        .rounded
          %a{href: '#speaker6', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/lance.jpg"
          %a{:href=>"https://twitter.com/lgleasain", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/lgleasain", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker6', rel: 'speakers', class: 'fancybox'} Lance Gleason
        %p Analytics for the Busy Ruby Developer

        #speaker6.detail
          .links.right
            %a{:href=>"https://twitter.com/lgleasain", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/lgleasain", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/lance.jpg"
            %h2 Lance Gleason
          .inner
            %p Lance has been a computer nut ever since his dad bought him a VIC 20 in the 1980s. After nearly a decade as a Java developer for companies like Kodak, CNN, and GE, he decided to end his addiction to heavy inheritance, static typing, and coding without tests. These days, he practices clean Ruby living with lots of well-tested code, class composition, and fun dynamic languages as a developer/startup CTO for hire with extensive experience in data science and committer on open source projects such as the Passbook-iOS, Asari and Active Asari Gems. He is known to practice interspecies pair (purr) programming with his orange tabby, Allie, and when he's not writing code, you will find him diving with sharks, trekking through Chernobyl, sampling wine, cheering on the Springboks or perfecting his biltong recipe.
            %h3 Analytics for the Busy Ruby Developer
            %p Our applications have the potential to produce a lot of data. Every time a user clicks a button, buys something, or our application does any number of things we have the opportunity to gain useful insights. But where do you begin? Should I gather every data point I can think of? What tools work the best? There is a lot of talk and hype about analytics. In this session, let's take a look at what goes into mining data and analyzing the insights. We'll discuss different approaches to gathering, storing, and querying data, how to determine the KPIs to focus on, and how to interpret and use information in meaningful ways. While you may not be a statistician, see how some basic statistics can help you to start to wrangle your data.

      %li.speaker
        .rounded
          %a{href: '#speaker7', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/zachary.jpg"
          %a{:href=>"https://twitter.com/_zzak", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/zzak", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker7', rel: 'speakers', class: 'fancybox'} Zachary Scott
        %p Contributing to Ruby

        #speaker7.detail
          .links.right
            %a{:href=>"https://twitter.com/_zzak", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/zzak", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/zachary.jpg"
            %h2 Zachary Scott
          .inner
            %p Zachary Scott has been a Ruby committer since 2012 and will share his experiences with contributing to CRuby.
            %h3 Contributing to Ruby
            %p Newcomer or seasoned veteran looking to get involved with Ruby documentation?
            %p The path to eternal gratification can seem like a scary one, but we'll show you it's alot easier than you thought. Writing documentation is a great way to give back to the open source community and build your Ruby skills and fundamentals.
            %p This talk will teach you the value of open-source, the benefits of contributing, and a little bit about how ruby-core works. You will learn what to look for when spotting documentation bugs in the CRuby source code. We will cover the guidelines to writing CRuby documentation, and how to submit a patch.

      %li.speaker
        .rounded
          %a{href: '#speaker8', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/sallylehman.jpg"
          %a{:href=>"https://twitter.com/SllyLhmn", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/rothsa", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker8', rel: 'speakers', class: 'fancybox'} Sally Lehman
        %p Email Delivery for Rails Folks (or 'How to send lots of email and not look like spam')

        #speaker8.detail
          .links.right
            %a{:href=>"https://twitter.com/SllyLhmn", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/rothsa", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/sallylehman.jpg"
            %h2 Sally Lehman
          .inner
            %p I grew up in various small towns in Oregon and Washington., and now live in the Pearl District of Portland, Oregon, USA. My first computer experiences were with EMACs, MS-DOS, and Ski Free at age <= 5.
            %p At Github, I'm currently making improvements to email delivery, reputation and infrastructure, so that emails get delivered reliably and fast. I worked at Mad Mimi prior to this since 2009, focusing on email delivery there as well.
            %p My favorite movie is Office Space, and I make a mean Tiramisu.
            %h3 Email Delivery for Rails Folks (or 'How to send lots of email and not look like spam')
            %p This talk will focus more on the delivery aspects of sending lots of email while including some basic configuration for Linux, Rails, & Postfix.
            %ul
              %li How to send lots of email and not look like spam.
              %li What You Don't Know About Sending Email
              %li Most People Who Send Lots of Email, are Sending Spam.
              %li Make Sure You're not Sending Spam
              %li Make Sure the Gatekeepers you're Sending to Know Who You Are
              %li Make Sure You're Using the Right Tools for the Job
              %li Gather Feedback From the People You are Sending to, and Act on it
              %li How to comfortably forget most of what I said here (except for the not sending spam part)
              %li Helpful Links

      %li.speaker
        .rounded
          %a{href: '#speaker9', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/johnanderson.jpg"
          %a{:href=>"https://www.twitter.com/djellemah", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://www.github.com/djellemah", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker9', rel: 'speakers', class: 'fancybox'} John Anderson
        %p What is an object, really?

        #speaker9.detail
          .links.right
            %a{:href=>"https://www.twitter.com/djellemah", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://www.github.com/djellemah", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/johnanderson.jpg"
            %h2 John Anderson
          .inner
            %p Ruby fan since 2004, Rails since 2005. Code since 1989. HTML since 3.2 was shiny and new. Javascript for too long. BSc Computer Science and Economics. Also studied Philosophy, Physics, Comparative Literature and Music.
            %h3 What is an object, really?
            %p OR
            %h3 When is an object actually a function?
            %p Programming languages exist to allow programmers to make sense of complex real-world problems. What real world scenarios lend themselves to modelling by objects, and which to functions?
            %p The first time I met objects was in Turbo Pascal in about 1990. I was completely baffled. I eventually got comfortable with objects in c++, and had that turned on its head by Smalltalk. Then Java objects came along and made me write too much code. Ruby was a breath of fresh air, but it took me 8 years before I really grokked the object model in Ruby. Lately with all the interest in functional languages, I've been glimpsing some overlaps between functions and objects.
            %p I'm still not sure if CLOS is a good idea though.
            %p Accompanied by real-world code examples in Ruby, naturally.

      %li.speaker
        .rounded
          %a{href: '#speaker10', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/rory.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/rorymckinley", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/rorymckinley", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker10', rel: 'speakers', class: 'fancybox'} Rory McKinley
        %p TDD: When the thrill has gone

        #speaker10.detail
          .links.right
            %a{:href=>"https://twitter.com/rorymckinley", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/rorymckinley", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/rory.jpg"
            %h2 Rory McKinley
          .inner
            %p Rory wishes he had spent all his time since the last Rubyfuza working on a bio that would make him sound awesome. In reality there is not enough time in the world for that :).
            %p Rory is lucky enough to work with smart, passionate people who want to make a difference. He has been writing software for more than 10 years, and he believe that all he needs is a few more years of psychotherapy and he will forget all the terrible, terrible code he has written in that decade.
            %h3 TDD: When the thrill has gone
            %p I have been doing TDD for several years and of late, I have been left with the feeling that I am missing some key part of the value that it supposed to offer. This talk will cover some (not enough time for all) of the n00b mistakes I have made in the past, and I will try and present a TDD strategy that works for me and may help inform improvements in the way others approach their tests.

      %li.speaker
        .rounded
          %a{href: '#speaker14', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/kevin.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/kmckelvin", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/kmckelvin", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker14', rel: 'speakers', class: 'fancybox'} Kevin McKelvin
        %p Clean Code: Applying Object Oriented Principles

        #speaker14.detail
          .links.right
            %a{:href=>"https://twitter.com/kmckelvin", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/kmckelvin", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/kevin.jpg"
            %h2 Kevin McKelvin
          .inner
            %p Kevin is a Ruby developer at Platform45. He began his career working with C#, but made the switch to Ruby in 2011 and hasn't looked back since. He has strange obsessions with vim, code quality and guitars.
            %h3 Clean Code: Applying Object Oriented Principles
            %p Ruby gives us a lot of freedom when expressing code and draws features from various paradigms, but it's an object oriented language at heart. In this session we'll go back to first principles of object oriented programming and see how applying object inheritance, polymorphism and a bit of discipline can translate into an understandable and maintainable codebase.

      %li.speaker
        .rounded
          %a{href: '#speaker11', rel: 'speaker_image', class: 'fancybox'}
            = img "../images/speakers/simon.jpg", :class => 'bg'
          %a{:href=>"https://twitter.com/siefi", :class=>"twitter"}= img "../images/twitter.png"
          %a{:href=>"https://github.com/sighmin", :class=>"github"}= img "../images/github.png"
        %h2
          %a{href: '#speaker11', rel: 'speakers', class: 'fancybox'} Simon van Dyk
        %p The Birds &amp; The Bees

        #speaker11.detail
          .links.right
            %a{:href=>"https://twitter.com/siefi", :class=>"twitter"}= img "../images/twitter.png"
            %a{:href=>"https://github.com/sighmin", :class=>"github"}= img "../images/github.png"
          .name
            = img "../images/speakers/simon.jpg"
            %h2 Simon van Dyk
          .inner
            %p Hi There I'm Simon. My number one goal is to love my work. I love building robust, innovative, and creative systems with imaginative people.
            %p I'm a fan of beautiful interfaces, usable and intuitive software. Software has such great potential to change the way that people live. Recently my love for AI and it's potential to solve some of the world's biggest problems is very quickly becoming my life long goal, to add value to peoples lives with the power of technology and software.
            %h3 The Birds &amp; The Bees
            %p An overview of computational intelligence (AI) paradigms focusing on their practical applications, the joy of programming in metaphors (birds, bees, ants etc). I'll introduce each paradigm in {neural networks, fuzzy systems, artificial immume systems, swarm intelligence and evolutionary computation} but focus on swarm intelligence and go through examples, like, simple data clustering using ants.

      %li.speaker{style: 'width:34.5%;'}

      %li.you
        .rounded
          %a{:href=>"http://rubyfuza.wufoo.com/forms/rubyfuza-2014-talk-proposal/"}= img "../images/speakers/you.png"
        %h2 You?
        %p
          We're still looking for inspiring speakers!
          = link_to "I want to speak", "http://rubyfuza.wufoo.com/forms/rubyfuza-2014-talk-proposal/", :class => "hot"

    /   %li.speaker
    /     .rounded
    /       %a{href: '#speaker12', rel: 'speaker_image', class: 'fancybox'}
    /         = img "../images/speakers/vicent.jpg", :class => 'bg'
    /       %a{:href=>"https://twitter.com/vmg", :class=>"twitter"}= img "../images/twitter.png"
    /       %a{:href=>"https://github.com/vmg", :class=>"github"}= img "../images/github.png"
    /     %h2
    /       %a{href: '#speaker12', rel: 'speakers', class: 'fancybox'} Vicent Martí
    /     %p Unicorns die with bullets made of glitter

    /     #speaker12.detail
    /       .links.right
    /         %a{:href=>"https://twitter.com/vmg", :class=>"twitter"}= img "../images/twitter.png"
    /         %a{:href=>"https://github.com/vmg", :class=>"github"}= img "../images/github.png"
    /       .name
    /         = img "../images/speakers/vicent.jpg"
    /         %h2 Vicent Martí
    /       .inner
    /         %p Vicent Martí used to make videogames, but he sold out because he likes to wear expensive clothes. Or any clothes at all. He now works full time as a systems engineer at GitHub, focusing on security and performance issues on the backend. He's also the maintainer of libgit2, the Git library that powers GitHub's backend and native clients. He takes long showers because he enjoys smelling nice.
    /         %h3 Unicorns die with bullets made of glitter
    /         %p This talk is about more than Unicorns. This is a scary talk about scary Ruby internals. Disregard the Unicorns, actually. There's a lot going on under the hood in MRI, YARV and Rubinius. The C and C++ layer that interacts with the OS is a tangly mess full of tricky bugs and arcane issues; the kind of issues that don't raise exceptions, but kill whole processes and make them bleed rainbows. Every time one of these "glitter bullets" kills a Ruby process, I shed a small tear: This is a talk about how we discover, tackle and fix these kind of issues at GitHub, to ensure our servers are always up and serving requests.

    /   %li.speaker
    /     .rounded
    /       %a{href: '#speaker13', rel: 'speaker_image', class: 'fancybox'}
    /         = img "../images/speakers/garren.jpg", :class => 'bg'
    /       %a{:href=>"https://twitter.com/garrensmith", :class=>"twitter"}= img "../images/twitter.png"
    /       %a{:href=>"https://github.com/garrensmith", :class=>"github"}= img "../images/github.png"
    /     %h2
    /       %a{href: '#speaker13', rel: 'speakers', class: 'fancybox'} Garren Smith
    /     %p Developing multiple personalities to bootstrap your first product

    /     #speaker13.detail
    /       .links.right
    /         %a{:href=>"https://twitter.com/garrensmith", :class=>"twitter"}= img "../images/twitter.png"
    /         %a{:href=>"https://github.com/garrensmith", :class=>"github"}= img "../images/github.png"
    /       .name
    /         = img "../images/speakers/garren.jpg"
    /         %h2 Garren Smith
    /       .inner
    /         %p Garren is the founder of Red Comet Labs. He has bootstrapped his first product, Classroom 7, a learning management system for trainers. Garren spends most his time programming in Ruby and Javascript. He enjoys dabbling in other languages like Go and Erlang. Garren plays Bass guitar, tennis and is trying to get through the whole Wheel of Time series in his spare time.
    /         %h3 Developing multiple personalities to bootstrap your first product
    /         %p Ready, set, launch, (...crickets...). The tale of many a developer-turned-product-launcher, including me. But after a false start, I launched Classroom 7, a learning management system for trainers, which is now well on its way to paying the bills. Bootstrapping a product requires a bit of a multiple personality disorder - you’ve got to be a dreamer, engineer, critic, bank manager and sales exec all rolled into one. In this talk I'll share some of the lessons I've learned during the product launching journey and talk about some of the pitfalls that should be avoided when launching a product. Everyone has the ability to bootstrap a successful product, you've just got to start out right. This talk will set you on the right path.

    /   %li.speaker
    /     .rounded
    /       %a{href: '#speaker15', rel: 'speaker_image', class: 'fancybox'}
    /         = img "../images/speakers/ryan.jpg", :class => 'bg'
    /       %a{:href=>"https://twitter.com/ryanlemmer", :class=>"twitter"}= img "../images/twitter.png"
    /       / %a{:href=>"https://github.com/ryanlemmer", :class=>"github"}= img "../images/github.png"
    /     %h2
    /       %a{href: '#speaker15', rel: 'speakers', class: 'fancybox'} Ryan Lemmer
    /     %p Side-effects are not your friend

    /     #speaker15.detail
    /       .links.right
    /         %a{:href=>"https://twitter.com/ryanlemmer", :class=>"twitter"}= img "../images/twitter.png"
    /         / %a{:href=>"https://github.com/ryanlemmer", :class=>"github"}= img "../images/github.png"
    /       .name
    /         = img "../images/speakers/ryan.jpg"
    /         %h2 Ryan Lemmer
    /       .inner
    /         %p Ryan is a Cape Town based software maker and coach.
    /         %p He made very good friends with Ruby back in mid-noughties. Since then he's been exploring functional programming, and is starting to see what all the fuss is about.
    /         %p Ryan loves to learn and to stoke the flame of learning in others.
    /         %h3 Side-effects are not your friend
    /         %p Functional Programming is more than a set of language features. It's a style of thinking, a way of doing things.
    /         %p Ruby gives us access to some aspects of the Functional style through lambdas, blocks, procs, and array iterators.
    /         %p But the most profound way in which Functional thinking can change your Ruby day comes down to a core issue of Functional Programming: "side-effects". Ruby places no restriction on leaving side-effects - it comes down to the choice (and then discipline) of the Rubyist to refrain from doing so.
    /         %p Side-effect-free code is more easily testable, and more predictable than side-effect-ridden code.
    /         %p In this talk I'll show you some of the many ways in which side-effects cause you pain and suffering, and techniques and strategies of leaving less of them in your wake.

    /   %li.speaker
    /     .rounded
    /       %a{href: '#speaker16', rel: 'speaker_image', class: 'fancybox'}
    /         = img "../images/speakers/jacob.jpg", :class => 'bg'
    /       %a{:href=>"https://twitter.com/beanstalksurf", :class=>"twitter"}= img "../images/twitter.png"
    /       %a{:href=>"https://github.com/jacobo", :class=>"github"}= img "../images/github.png"
    /     %h2
    /       %a{href: '#speaker16', rel: 'speakers', class: 'fancybox'} Jacob Burkhart
    /     %p Living with Distributed Systems

    /     #speaker16.detail
    /       .links.right
    /         %a{:href=>"https://twitter.com/beanstalksurf", :class=>"twitter"}= img "../images/twitter.png"
    /         %a{:href=>"https://github.com/jacobo", :class=>"github"}= img "../images/github.png"
    /       .name
    /         = img "../images/speakers/jacob.jpg"
    /         %h2 Jacob Burkhart
    /       .inner
    /         %p Jacob is the world's foremost expert on Distributed Systems (within the subset of people who: work in Ruby for a living, surf the Pacific regularly, and brew sour beers). He does all these things in San Francisco California, while working at Engine Yard.
    /         %h3 Living with Distributed Systems
    /         %p We all know the problem of the monolithic rails app, and we've all accepted the divine words of Service-Oriented Architecture. But what does your world look like once you get there? Or say, maybe, three-quarters of the way there.
    /         %p Allow me to show you some of the mistakes we've made at Engine Yard on this path. It can be a bumpy road, but I promise you the destination is worth it.

    /   %li.speaker
    /     .rounded
    /       %a{href: '#speaker17', rel: 'speaker_image', class: 'fancybox'}
    /         = img "../images/speakers/terrence.jpg", :class => 'bg'
    /       %a{:href=>"https://twitter.com/hone02", :class=>"twitter"}= img "../images/twitter.png"
    /       %a{:href=>"https://github.com/hone", :class=>"github"}= img "../images/github.png"
    /     %h2
    /       %a{href: '#speaker17', rel: 'speakers', class: 'fancybox'} Terence Lee
    /     %p `bundle install` Y U SO SLOW: Server Edition

    /     #speaker17.detail
    /       .links.right
    /         %a{:href=>"https://twitter.com/hone02", :class=>"twitter"}= img "../images/twitter.png"
    /         %a{:href=>"https://github.com/hone", :class=>"github"}= img "../images/github.png"
    /       .name
    /         = img "../images/speakers/terrence.jpg"
    /         %h2 Terence Lee
    /       .inner
    /         %p Terence works at Heroku maintaining the Ruby stack and a slew of OSS projects such as Bundler and Resque, as well as helping with the Rails Girls movement. When he's not going to an awesome Heroku or Ruby event, he lives in Austin, TX, the taco capital of America.
    /         %p (Terence loves Friday hugs, EVERY DAY OF THE WEEK! Give him a big one when you see him!)
    /         %h3 `bundle install` Y U SO SLOW: Server Edition
    /         %p If you've ever done anything in ruby, you've probably used rubygems and rubygems.org to search or install your favorite gem. On October 17, 2012, rubygems.org went down. A Dependency API was built to be used by Bundler 1.1+ to speed up `bundle install`. Unfortunately, it was a bit too popular and the service caused too much load on the current infrasture. In order to get rubygems.org back up the API had to be disabled. You can watch the post-mortem, http://youtu.be/z73uiWKdJhw, for details.
    /         %p Members in the community stepped up and built a compatible Dependency API service called the Bundler API. Working with the rubygems.org team, we were able to bring the API up for everyone within a week. In this talk, I will cover the process we went through of extracting the API out into a separate Sinatra app that now runs on Heroku. I'll go over how the API works and how Bundler itself uses it. Since we don't have direct access to their database, we needed to build a syncing service to keep our local cache up to date. We'll discuss the original sequential implementation of the sync code and how we improved performance through the use of a consumer thread pool. The sync time down was cut from 16 mins to 2-3 mins. Next, we'll talk about the productization steps we took for visibility to make sure the app is performing well.
    /         %p We're prototyping a replay service, to replay production traffic to different Heroku apps. With this we can compare the performance between the current MRI app in production and the same app running on JRuby. This will also allow us to test any changes/features against real production load. We'll go over how to set this up.

    /   %li.speaker
    /     .rounded
    /       %a{href: '#speaker18', rel: 'speaker_image', class: 'fancybox'}
    /         = img "../images/speakers/aslam.jpg", :class => 'bg'
    /       %a{:href=>"https://twitter.com/aslamkhn", :class=>"twitter"}= img "../images/twitter.png"
    /       %a{:href=>"https://github.com/aslamkhn", :class=>"github"}= img "../images/github.png"
    /     %h2
    /       %a{href: '#speaker18', rel: 'speakers', class: 'fancybox'} Aslam Khan
    /     %p Not Quite Object Oriented

    /     #speaker18.detail
    /       .links.right
    /         %a{:href=>"https://twitter.com/aslamkhn", :class=>"twitter"}= img "../images/twitter.png"
    /         %a{:href=>"https://github.com/aslamkhn", :class=>"github"}= img "../images/github.png"
    /       .name
    /         = img "../images/speakers/aslam.jpg"
    /         %h2 Aslam Khan
    /       .inner
    /         %p I'm a developer making peace with the fact that I dropped out of a Lisp class in high school because I figured that nobody in their right mind would ever write code like that.  Nowadays, I spend my time cracking really hard nuts, not P=NP hard, just very complex hard.  Sometimes, I contribute a bit to the agile software community by offering tissues at conferences to Scrum people who just realized that certification and time boxes were not all that it was cracked out to be. I also help insomniacs with my rather soporific blog at f3yourmind.net.
    /         %h3 Not Quite Object Oriented
    /         %p Ruby is a language, just a tool for a developer to build software. To use this tool effectively, the programmer must be familiar with object orientated programming. Object orientation is a paradigm, not a tool.  It is a very specific world view based on underlying theories.  Embracing this world view is a serious choice.  It means that the developer is obliged to think in a very specific way.  Nowadays, many Ruby developers also use other tools like JavaScript and CoffeeScript. These languages are not from the same world as Ruby.  They are from another paradigm - functional programming.  Functional programming is a different world view, based on different underlying theories.  Trying to use a tool from one world when your head is wired for the other world just results in is a code base that is messy and very expensive.
    /         %p Since we are using these functional tools, we really do need to understand this world. So, what does this functional world look like?  How are functional minds wired?
    /         %p In this talk, I will take you on a whirlwind tour of functional programming concepts.  You will see lots of code snippets in lots of different languages. My objective is simple - a tour guide view that will point out places of interest that you can explore at your leisure.  In the end, I hope we will make smaller messes.

    /   %li.speaker
    /     .rounded
    /       %a{href: '#speaker19', rel: 'speaker_image', class: 'fancybox'}
    /         = img "../images/speakers/stu.jpg", :class => 'bg'
    /       %a{:href=>"https://twitter.com/stucorbishley", :class=>"twitter"}= img "../images/twitter.png"
    /       %a{:href=>"https://github.com/stuartc", :class=>"github"}= img "../images/github.png"
    /     %h2
    /       %a{href: '#speaker19', rel: 'speakers', class: 'fancybox'} Stuart Corbishley
    /     %p Abstracting a Service - A Case Study in Forward Thinking with SOA

    /     #speaker19.detail
    /       .links.right
    /         %a{:href=>"https://twitter.com/stucorbishley", :class=>"twitter"}= img "../images/twitter.png"
    /         %a{:href=>"https://github.com/stuartc", :class=>"github"}= img "../images/github.png"
    /       .name
    /         = img "../images/speakers/stu.jpg"
    /         %h2 Stuart Corbishley
    /       .inner
    /         %p Stuart is a Cape Town based developer who fell in love with Ruby in 2007 and has been his passion since.
    /         %p Before then he was stuck in an unhealthy relationship with Delphi, and had courted PHP and C#. He is crazy about clean and minimalist design, photography and good beer.
    /         %p In a past life he's pretty sure he wore a cape.
    /         %h3 Abstracting a Service - A Case Study in Forward Thinking with SOA
    /         %p A brief case study on Service Abstraction. Taking a monolithic Rails app, separating concerns and growing out.
    /         %p I will be discussing the decision behind the abstraction, how we approached it and where a handful of gems made the process a whole lot easier.

    /   %li.speaker
    /     .rounded
    /       %a{href: '#speaker20', rel: 'speaker_image', class: 'fancybox'}
    /         = img "../images/speakers/luke.jpg", :class => 'bg'
    /       %a{:href=>"https://twitter.com/luke_randall", :class=>"twitter"}= img "../images/twitter.png"
    /       %a{:href=>"https://github.com/lukerandall", :class=>"github"}= img "../images/github.png"
    /     %h2
    /       %a{href: '#speaker20', rel: 'speakers', class: 'fancybox'} Luke Randall
    /     %p CQRS

    /     #speaker20.detail
    /       .links.right
    /         %a{:href=>"https://twitter.com/luke_randall", :class=>"twitter"}= img "../images/twitter.png"
    /         %a{:href=>"https://github.com/lukerandall", :class=>"github"}= img "../images/github.png"
    /       .name
    /         = img "../images/speakers/luke.jpg"
    /         %h2 Luke Randall
    /       .inner
    /         %p Outside of software development, my hobbies include finding new hobbies to pursue intently for 1 - 3 months, and selling equipment from abandoned hobbies on the Internet. I once wrote a quine in Ruby.
    /         %h3 CQRS
    /         %p A look at how this obscurely named pattern works and why you'd want to use it.

    %div.clearfix
    = partial('../partials/signup')
    /   %div.center
    /     %h2 You?
    /     %p
    /       We're looking for Lightning Talks!
    /       %br
    /       = link_to "I want to speak", "http://rubyfuza.wufoo.com/forms/rubyfuza-2013-lightning-talk-proposal/", :class => "hot"
